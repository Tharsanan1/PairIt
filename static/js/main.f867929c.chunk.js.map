{"version":3,"sources":["PairIt.jsx","App.js","serviceWorker.js","index.js"],"names":["random","seed","x","Math","sin","floor","PairIt","props","state","playerText","pairedResult","Date","getMilliseconds","handleChange","bind","handleSeedChange","handleClick","players","this","split","filter","element","length","isNaN","array","t","i","m","shuffle","index","push","A","B","setState","alert","e","target","value","style","margin","type","aria-label","aria-describedby","onChange","className","onClick","map","key","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uLAsBA,SAASA,EAAOC,GACd,IAAIC,EAAuB,IAAnBC,KAAKC,IAAIH,KACjB,OAAOC,EAAIC,KAAKE,MAAMH,G,IAGHI,E,kDACjB,WAAYC,GAAO,IAAD,8BACd,cAAMA,IACDC,MAAQ,CACTC,WAAa,sFACbC,aAAe,GACfT,MAAO,IAAIU,MAAOC,mBAEtB,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,iBAAmB,EAAKA,iBAAiBD,KAAtB,gBACxB,EAAKE,YAAc,EAAKA,YAAYF,KAAjB,gBATL,E,0DAad,IAAIG,EAAUC,KAAKV,MAAMC,WAAWU,MAAM,KAI1C,IAHAF,EAAUA,EAAQG,QAAO,SAAAC,GACrB,MAAoB,KAAZA,MAEDC,OAAS,IAAM,EAA1B,CAIA,IAAIrB,EAAOiB,KAAKV,MAAMP,KACnBsB,MAAMtB,KACLA,GAAO,IAAIU,MAAOC,mBAEtBK,EAlDR,SAAiBO,EAAOvB,GAItB,IAHA,IAAsBwB,EAAGC,EAArBC,EAAIH,EAAMF,OAGPK,GAGLD,EAAIvB,KAAKE,MAAML,EAAOC,GAAQ0B,KAG9BF,EAAID,EAAMG,GACVH,EAAMG,GAAKH,EAAME,GACjBF,EAAME,GAAKD,IACTxB,EAGJ,OAAOuB,EAkCSI,CAAQX,EAAShB,GAG3B,IADA,IAAIS,EAAe,GACVmB,EAAQ,EAAGA,EAAQZ,EAAQK,OAAO,EAAGO,IAC1CnB,EAAaoB,KAAK,CACdC,EAAEd,EAAQY,GACVG,EAAEf,EAAQY,EAAQZ,EAAQK,OAAO,KAKzCJ,KAAKe,SAAS,CACVvB,aAAeA,SAnBfwB,MAAM,6E,mCAwBDC,GACTjB,KAAKe,SAAS,CACVxB,WAAY0B,EAAEC,OAAOC,U,uCAIZF,GACTZ,MAAMY,EAAEC,OAAOC,QACfnB,KAAKe,SAAS,CACVhC,MAAOkC,EAAEC,OAAOC,U,+BAKnB,IAAD,OACJ,OACI,6BACI,yBAAKC,MAAO,CAAEC,OAAQ,SAAtB,UAA4C,2BAAOD,MAAO,CAAEC,OAAQ,QAAUC,KAAK,OAAQC,aAAW,QAAQC,mBAAiB,uBAAuBC,SAAUzB,KAAKH,iBAAkBsB,MAAOnB,KAAKV,MAAMP,OACzM,6BACA,6BACA,yBAAKqC,MAAO,CAAEC,OAAQ,SAAtB,WAA6C,8BAAUD,MAAO,CAAEC,OAAQ,QAAUF,MAAOnB,KAAKV,MAAMC,WAAYkC,SAAYzB,KAAKL,eACjI,6BACA,6BACA,4BAAQyB,MAAO,CAAEC,OAAQ,QAAUK,UAAU,kBAAkBC,QAAS,WAAO,EAAK7B,gBAApF,gBACA,6BACA,6BACA,yBAAKsB,MAAO,CAAEC,OAAQ,SAAtB,kBACCrB,KAAKV,MAAME,aAAaoC,KAAI,SAAAzB,GACzB,OAAQ,yBAAK0B,IAAO1B,EAAQU,EAAIV,EAAQW,EAAGM,MAAO,CAAEC,OAAQ,SAAWlB,EAAQU,EAAvE,cAAqFV,EAAQW,EAA7F,a,GAvEQgB,IAAMC,WCjB3BC,MARf,WACE,OACE,yBAAKN,UAAU,OACb,kBAAC,EAAD,QCOcO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.f867929c.chunk.js","sourcesContent":["import React from 'react';\n\n\nfunction shuffle(array, seed) {                // <-- ADDED ARGUMENT\n  var m = array.length, t, i;\n\n  // While there remain elements to shuffle…\n  while (m) {\n\n    // Pick a remaining element…\n    i = Math.floor(random(seed) * m--);        // <-- MODIFIED LINE\n\n    // And swap it with the current element.\n    t = array[m];\n    array[m] = array[i];\n    array[i] = t;\n    ++seed                                     // <-- ADDED LINE\n  }\n\n  return array;\n}\n\nfunction random(seed) {\n  var x = Math.sin(seed++) * 10000; \n  return x - Math.floor(x);\n}\n\nexport default class PairIt extends React.Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            playerText : \"Murthi Raj Senthu Balini Jannan Sinthu Thusha Sakee Tharsanan Rahavan Praveen Saran\",\n            pairedResult : [],\n            seed : new Date().getMilliseconds()\n        }\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSeedChange = this.handleSeedChange.bind(this);\n        this.handleClick = this.handleClick.bind(this);\n    }\n\n    handleClick(){\n        let players = this.state.playerText.split(\" \");\n        players = players.filter(element => {\n            return (element !== \"\");\n        });\n        if(players.length % 2 !== 0){\n            alert(\"Odd number of players entered and cannot pair them One will left alone!\");\n            return;\n        }\n        let seed = this.state.seed;\n        if(isNaN(seed)){\n            seed = new Date().getMilliseconds();\n        }\n        players = shuffle(players, seed);\n\n        let pairedResult = [];\n        for (let index = 0; index < players.length/2; index++) {\n            pairedResult.push({\n                A:players[index],\n                B:players[index + players.length/2]\n            });\n            \n        }\n\n        this.setState({\n            pairedResult : pairedResult\n        });\n\n    }\n\n    handleChange(e){\n        this.setState({\n            playerText: e.target.value\n        });\n    }\n\n    handleSeedChange(e){\n        if(!isNaN(e.target.value)){\n            this.setState({\n                seed: +e.target.value\n            });\n        }\n    }\n\n    render(){\n        return(\n            <div>\n                <div style={{ margin: \"10px\" }}>Seed :</div><input style={{ margin: \"20px\" }} type=\"text\"  aria-label=\"Small\" aria-describedby=\"inputGroup-sizing-sm\" onChange={this.handleSeedChange} value={this.state.seed}/>\n                <br/>\n                <br/>\n                <div style={{ margin: \"10px\" }}>Names :</div><textarea style={{ margin: \"20px\" }} value={this.state.playerText} onChange = {this.handleChange}/>\n                <br/>\n                <br/>\n                <button style={{ margin: \"20px\" }} className=\"btn btn-primary\" onClick={() => {this.handleClick()}}>Create Teams</button>\n                <br/>\n                <br/>\n                <div style={{ margin: \"10px\" }}>Team Details :</div>\n                {this.state.pairedResult.map(element => {\n                    return (<div key = {element.A + element.B} style={{ margin: \"20px\" }}>{element.A}   ::::    {element.B} </div>);\n                })}\n            </div>\n        );\n    }\n}","import React from 'react';\nimport PairIt from './PairIt';\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PairIt/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}